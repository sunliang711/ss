#!/bin/bash
#. /etc/init.d/functions
if (($EUID!=0));then
    echo "Need root priviledge!" >&2
    exit 1
fi

ROOT=/ss-go
cd "$ROOT"
prgname=$(ls shadowsocks-server*)
echo "---------------------------------------------------------------"
echo "shadowsocks app name is: $ROOT/$prgname"
echo "shadowsocks config file is: $ROOT/config.json"
echo "---------------------------------------------------------------"

start(){
    oneStop
    ulimit -n 51200
    if [ -z "$prgname" ];then
        echo "shadowsocks-server not found in $ROOT">&2 
        exit 1
    fi
    if ps aux | grep -v grep | grep -q  ${prgname};then
        echo "Warning: ${prgname} is already running"
        exit 1
    fi
    ./${prgname} > /dev/null  2>&1 &
    if pgrep "${prgname:0:15}">/dev/null 2>&1;then
        echo "OK: ${prgname} has started."
    else
        echo "Failed: ${prgname} start failed!"
    fi
    # if ps aux | grep -v grep | grep -q  ${prgname};then
        # echo "OK: ${prgname} has started"
    # else
        # echo "Failed: ${prgname} start failed!"
    # fi
    fwOn
}

oneStart(){
    stop
    ulimit -n 51200
    prgname=$(ls max_server*)
    if [ -z "$prgname" ];then
        echo "shadowsocks-server not found in $ROOT">&2 
        exit 1
    fi
    if ps aux | grep -v grep | grep -q  ${prgname};then
        echo "Warning: ${prgname} is already running"
        exit 1
    fi
    ./${prgname} > /dev/null  2>&1 &
    if pgrep "${prgname:0:15}">/dev/null 2>&1;then
        echo "OK: ${prgname} has started."
    else
        echo "Failed: ${prgname} start failed!"
    fi
    # if ps aux | grep -v grep | grep -q  ${prgname};then
        # echo "OK: ${prgname} has started"
    # else
        # echo "Failed: ${prgname} start failed!"
    # fi
    fwOn

}

oneStop(){
    prgname=$(ls max_server*)
    if pgrep "${prgname:0:15}";then
        pkill "${prgname:0:15}"
        status
    else
        echo "**Warning**${prgname} is not running!"
    fi
    fwOff
}

stop(){
    # pid=`ps -ef | grep ${prgname} | grep -v grep | awk '{print $2}'`
    # if [[ "$pid" != ""  ]];then
    #     echo -n "Found ${prgname} with pid: $pid,try to kill it ... "
    #     kill -9 $pid
    #     pid=`ps -ef | grep ${prgname} | grep -v grep | awk '{print $2}'`
    #     if [ -z "$pid" ];then
    #         echo "[OK]"
    #     else
    #         echo "[Failed]"
    #     fi
    # else
    #     echo "Warning:${prgname} is not running!"
    # fi
    if pgrep "${prgname:0:15}";then
        pkill "${prgname:0:15}"
        status
    else
        echo "**Warning**${prgname} is not running!"
    fi
    fwOff
}

restart(){
    stop
    start
}

status(){
    # pid=`ps -ef | grep ${prgname} | grep -v grep | awk '{print $2}'`
    pid=`pgrep "${prgname:0:15}"`
    if [ -n $pid ];then
        echo "$prgname is running with pid: $pid."
    else
        echo "$prgname is not running."
    fi
}

config(){
    editor="vi"
    if command -v vim >/dev/null 2>&1;then
        editor="vim"
    fi
    "$editor" "$ROOT/config.json"
    read -p "Update firewall? [Y/n]" -t 10 fw
    if [[ "$fw" != [nN] ]];then
        fwOn
    fi
}

usage(){
    echo "Usage: $0 {start|stop|status|restart|config|fwOn|fwOff|uninstall|oneStart|oneStop}">&2
    echo "        fwOn  for firewall on"
    echo "        fwOff for firewall off"
    echo "        config for port setting"
    exit 1
}

uninstall(){
    if [ -d "$ROOT" ];then
        rm -rf "$ROOT"
    fi

    if grep -q "ss-go start" /etc/rc.local;then
        sed -i "/ss-go start/d" /etc/rc.local
    fi

    if grep -q "alias ss-go" ~/.bashrc;then
        sed -i "/alias ss-go/d" ~/.bashrc
    fi
}

fwOn(){
#make firewall rule
##header
cat>"$ROOT"/firewall<<EOF
*filter
:INPUT DROP [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p icmp -j ACCEPT

EOF

##custom rule
echo '#SSH port' >>"$ROOT"/firewall
echo "-A INPUT -p tcp --dport 22 -j ACCEPT" >>"$ROOT"/firewall

##shadowsocks port from 'config.json'
echo >>"$ROOT"/firewall
echo '#Shadowsocks port' >>"$ROOT"/firewall
grep -oP '(?<=")[0-9]+(?=":)' "$ROOT"/config.json |awk '{print "-A INPUT -p tcp --dport "$0" -j ACCEPT"}' >>"$ROOT"/firewall
echo >>"$ROOT"/firewall

if [ -f "$ROOT"/otherRule ];then
    cat "$ROOT"/otherRule >> "$ROOT"/firewall
fi

#footer
cat >>"$ROOT"/firewall<<EOF2
COMMIT
EOF2
editor=vi
if command -v vim>/dev/null 2>&1;then
    editor=vim
fi
read -p "Edit firewall file (view or add custom rule)?[Y/n]"  -t 10 fw
if [[ "$fw" != [nN] ]];then
    "$editor" "$ROOT"/firewall
    sed -n "/#otherRule begin/,/#otherRule end/w $ROOT/otherRule" "$ROOT"/firewall
fi

iptables-restore <"$ROOT"/firewall
}

fwOff(){
    iptables -F
    iptables -X
    iptables -Z
    iptables -P INPUT ACCEPT
    iptables -P OUTPUT ACCEPT
    iptables -P FORWARD ACCEPT
}
uninstall(){
    stop
    rm -rf "$ROOT"
    bashrc=$(ls /etc/*bashrc)
    if grep -q "ss-go start" "$bashrc";then
        sed -i '/ss-go start/d' "$bashrc"
    fi
}
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        restart
        ;;
    config)
        config
        restart
        ;;
    uninstall)
        stop
        uninstall
        ;;
    fwOn)
        fwOn
        ;;
    fwOff)
        fwOff
        ;;
    uninstall)
        uninstall
        ;;
    oneStart)
        oneStart
        ;;
    oneStop)
        oneStop
        ;;
    *)
        usage
        ;;
esac
